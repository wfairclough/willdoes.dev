---
const { animation, delay } = Astro.props;
---

<wf-on-visible style="opacity: 0;" data-animation={animation} data-animation-delay={delay} class="initially-hidden initially-off-end">
  <slot />
</wf-on-visible>

<script>
class WfOnVisible extends HTMLElement {
  _observer!: IntersectionObserver;

  animationClass: string | undefined;
  animationDelay: number;

  constructor() {
    super();

    this._handleIntersection = this._handleIntersection.bind(this);

    this.animationClass = this.dataset.animation;
    this.animationDelay = parseInt(this.dataset.animationDelay || '0', 10);

    this.style.display = 'block';
  }

  connectedCallback() {
    this._observer = new IntersectionObserver(this._handleIntersection, {
      threshold: 0.025,
    });
    this._observer.observe(this);
  }

  disconnectedCallback() {
    this._observer.unobserve(this);
  }

  _handleIntersection(entries: IntersectionObserverEntry[]) {
    const entry = entries[0];
    if (entry.isIntersecting) {
      setTimeout(() => {
        this.style.opacity = '1';
        this.classList.add('is-visible');
        if (this.animationClass) {
          this.classList.add(this.animationClass);
        }
      }, this.animationDelay);
      this._observer.unobserve(this);
    }
  }
}

customElements.define('wf-on-visible', WfOnVisible);

</script>

<style>
  wf-on-visible:not(.is-visible)) {
    opacity: 0;
  }
  .is-visible {
    opacity: 1;
  }
  .initially-off-end {
    transform: translateX(100%);
  }
  .initially-off-start {
    transform: translateX(-100%);
  }
</style>
